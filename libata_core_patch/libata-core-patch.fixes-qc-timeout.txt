
Date:	 Tue, 2 Oct 2007 20:30:38 -0700 (PDT)
From:	"Rafael Ignacio Zurita" <rizurita@yahoo.com>
Subject:	[PATCH] libata-core-patch fixs qc timeout
To:	"Kristoffer Ericson" <kristoffer.ericson@gmail.com>


Fixs the qc timeout problem which we have in 
620/660 machines and the latest kernel.

It uses ATA_TFLAG_POLLING flag

Signed-offÂ­-by: Rafael Ignacio Zurita <rizurita@yahoo.com>

Applies to 2.6.23-RC5

diff --git a/drivers/ata/libata-core.c
b/drivers/ata/libata-core.c
index c43de9a..e17309e 100644
--- a/drivers/ata/libata-core.c
+++ b/drivers/ata/libata-core.c
@@ -319,7 +319,7 @@ int ata_build_rw_tf(struct
ata_taskfile *tf, struct ata_device *dev,
                    u64 block, u32 n_block, unsigned
int tf_flags,
                    unsigned int tag)
 {
-       tf->flags |= ATA_TFLAG_ISADDR |
ATA_TFLAG_DEVICE;
+       tf->flags |= ATA_TFLAG_ISADDR |
ATA_TFLAG_DEVICE | ATA_TFLAG_POLLING;
        tf->flags |= tf_flags;
 
        if (ata_ncq_enabled(dev) && likely(tag !=
ATA_TAG_INTERNAL)) {
@@ -328,7 +328,7 @@ int ata_build_rw_tf(struct
ata_taskfile *tf, struct ata_device *dev,
                        return -ERANGE;
 
                tf->protocol = ATA_PROT_NCQ;
-               tf->flags |= ATA_TFLAG_LBA |
ATA_TFLAG_LBA48;
+               tf->flags |= ATA_TFLAG_LBA |
ATA_TFLAG_LBA48 | ATA_TFLAG_POLLING;
 
                if (tf->flags & ATA_TFLAG_WRITE)
                        tf->command =
ATA_CMD_FPDMA_WRITE;
@@ -350,7 +350,7 @@ int ata_build_rw_tf(struct
ata_taskfile *tf, struct ata_device *dev,
                if (tf->flags & ATA_TFLAG_FUA)
                        tf->device |= 1 << 7;
        } else if (dev->flags & ATA_DFLAG_LBA) {
-               tf->flags |= ATA_TFLAG_LBA;
+               tf->flags |= ATA_TFLAG_LBA |
ATA_TFLAG_POLLING;
 
                if (lba_28_ok(block, n_block)) {
                        /* use LBA28 */
@@ -360,7 +360,7 @@ int ata_build_rw_tf(struct
ata_taskfile *tf, struct ata_device *dev,
                                return -ERANGE;
 
                        /* use LBA48 */
-                       tf->flags |= ATA_TFLAG_LBA48;
+                       tf->flags |= ATA_TFLAG_LBA48 |
ATA_TFLAG_POLLING;
 
                        tf->hob_nsect = (n_block >> 8)
& 0xff;
 
@@ -858,7 +858,7 @@ static u64
ata_read_native_max_address_ext(struct ata_device
*dev)
        ata_tf_init(dev, &tf);
 
        tf.command = ATA_CMD_READ_NATIVE_MAX_EXT;
-       tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_LBA48
| ATA_TFLAG_ISADDR;
+       tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_LBA48
| ATA_TFLAG_ISADDR | ATA_TFLAG_POLLING;
        tf.protocol |= ATA_PROT_NODATA;
        tf.device |= 0x40;
 
@@ -885,7 +885,7 @@ static u64
ata_read_native_max_address(struct ata_device *dev)
        ata_tf_init(dev, &tf);
 
        tf.command = ATA_CMD_READ_NATIVE_MAX;
-       tf.flags |= ATA_TFLAG_DEVICE |
ATA_TFLAG_ISADDR;
+       tf.flags |= ATA_TFLAG_DEVICE |
ATA_TFLAG_ISADDR | ATA_TFLAG_POLLING;
        tf.protocol |= ATA_PROT_NODATA;
        tf.device |= 0x40;
 
@@ -915,7 +915,7 @@ static u64
ata_set_native_max_address_ext(struct ata_device *dev,
u64 new_sector
        ata_tf_init(dev, &tf);
 
        tf.command = ATA_CMD_SET_MAX_EXT;
-       tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_LBA48
| ATA_TFLAG_ISADDR;
+       tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_LBA48
| ATA_TFLAG_ISADDR | ATA_TFLAG_POLLING;
        tf.protocol |= ATA_PROT_NODATA;
        tf.device |= 0x40;
 
@@ -953,7 +953,7 @@ static u64
ata_set_native_max_address(struct ata_device *dev, u64
new_sectors)
        ata_tf_init(dev, &tf);
 
        tf.command = ATA_CMD_SET_MAX;
-       tf.flags |= ATA_TFLAG_DEVICE |
ATA_TFLAG_ISADDR;
+       tf.flags |= ATA_TFLAG_DEVICE |
ATA_TFLAG_ISADDR | ATA_TFLAG_POLLING;
        tf.protocol |= ATA_PROT_NODATA;
 
        tf.lbal = (new_sectors >> 0) & 0xff;
@@ -1548,7 +1548,7 @@ unsigned int
ata_do_simple_cmd(struct ata_device *dev, u8 cmd)
        ata_tf_init(dev, &tf);
 
        tf.command = cmd;
-       tf.flags |= ATA_TFLAG_DEVICE;
+       tf.flags |= ATA_TFLAG_DEVICE |
ATA_TFLAG_POLLING;
        tf.protocol = ATA_PROT_NODATA;
 
        return ata_exec_internal(dev, &tf, NULL,
DMA_NONE, NULL, 0);
@@ -1655,7 +1655,7 @@ int ata_dev_read_id(struct
ata_device *dev, unsigned int *p_class,
        /* Some devices choke if TF registers contain
garbage.  Make
         * sure those are properly initialized.
         */
-       tf.flags |= ATA_TFLAG_ISADDR |
ATA_TFLAG_DEVICE;
+       tf.flags |= ATA_TFLAG_ISADDR |
ATA_TFLAG_DEVICE | ATA_TFLAG_POLLING;
 
        /* Device presence detection is unreliable on
some
         * controllers.  Always poll IDENTIFY if
available.
@@ -1721,7 +1721,7 @@ int ata_dev_read_id(struct
ata_device *dev, unsigned int *p_class,
                tf.command = ATA_CMD_SET_FEATURES;
                tf.feature = SETFEATURES_SPINUP;
                tf.protocol = ATA_PROT_NODATA;
-               tf.flags |= ATA_TFLAG_ISADDR |
ATA_TFLAG_DEVICE;
+               tf.flags |= ATA_TFLAG_ISADDR |
ATA_TFLAG_DEVICE | ATA_TFLAG_POLLING;
                err_mask = ata_exec_internal(dev, &tf,
NULL, DMA_NONE, NULL, 0);
                if (err_mask && id[2] != 0x738c) {
                        rc = -EIO;
@@ -2368,7 +2368,7 @@ void ata_port_disable(struct
ata_port *ap)
 {
        ap->device[0].class = ATA_DEV_NONE;
        ap->device[1].class = ATA_DEV_NONE;
-       ap->flags |= ATA_FLAG_DISABLED;
+       ap->flags |= ATA_FLAG_DISABLED |
ATA_TFLAG_POLLING;
 }
 
 /**
@@ -3984,7 +3984,7 @@ static unsigned int
ata_dev_init_params(struct ata_device *dev,
 
        ata_tf_init(dev, &tf);
        tf.command = ATA_CMD_INIT_DEV_PARAMS;
-       tf.flags |= ATA_TFLAG_ISADDR |
ATA_TFLAG_DEVICE;
+       tf.flags |= ATA_TFLAG_ISADDR |
ATA_TFLAG_DEVICE | ATA_TFLAG_POLLING;
        tf.protocol = ATA_PROT_NODATA;
        tf.nsect = sectors;
        tf.device |= (heads - 1) & 0x0f; /* max head =
num. of heads - 1 */




       
____________________________________________________________________________________
Take the Internet to Go: Yahoo!Go puts the Internet in your pocket:
 mail, news, photos & more. 
http://mobile.yahoo.com/go?refer=1GNXIC

Plain Text Attachment [ Scan and Save to Computer ]

diff --git a/drivers/ata/libata-core.c b/drivers/ata/libata-core.c
index c43de9a..e17309e 100644
--- a/drivers/ata/libata-core.c
+++ b/drivers/ata/libata-core.c
@@ -319,7 +319,7 @@ int ata_build_rw_tf(struct ata_taskfile *tf, struct
 ata_device *dev,
 		    u64 block, u32 n_block, unsigned int tf_flags,
 		    unsigned int tag)
 {
-	tf->flags |= ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE;
+	tf->flags |= ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE | ATA_TFLAG_POLLING;
 	tf->flags |= tf_flags;
 
 	if (ata_ncq_enabled(dev) && likely(tag != ATA_TAG_INTERNAL)) {
@@ -328,7 +328,7 @@ int ata_build_rw_tf(struct ata_taskfile *tf, struct
 ata_device *dev,
 			return -ERANGE;
 
 		tf->protocol = ATA_PROT_NCQ;
-		tf->flags |= ATA_TFLAG_LBA | ATA_TFLAG_LBA48;
+		tf->flags |= ATA_TFLAG_LBA | ATA_TFLAG_LBA48 | ATA_TFLAG_POLLING;
 
 		if (tf->flags & ATA_TFLAG_WRITE)
 			tf->command = ATA_CMD_FPDMA_WRITE;
@@ -350,7 +350,7 @@ int ata_build_rw_tf(struct ata_taskfile *tf, struct
 ata_device *dev,
 		if (tf->flags & ATA_TFLAG_FUA)
 			tf->device |= 1 << 7;
 	} else if (dev->flags & ATA_DFLAG_LBA) {
-		tf->flags |= ATA_TFLAG_LBA;
+		tf->flags |= ATA_TFLAG_LBA | ATA_TFLAG_POLLING;
 
 		if (lba_28_ok(block, n_block)) {
 			/* use LBA28 */
@@ -360,7 +360,7 @@ int ata_build_rw_tf(struct ata_taskfile *tf, struct
 ata_device *dev,
 				return -ERANGE;
 
 			/* use LBA48 */
-			tf->flags |= ATA_TFLAG_LBA48;
+			tf->flags |= ATA_TFLAG_LBA48 | ATA_TFLAG_POLLING;
 
 			tf->hob_nsect = (n_block >> 8) & 0xff;
 
@@ -858,7 +858,7 @@ static u64 ata_read_native_max_address_ext(struct
 ata_device *dev)
 	ata_tf_init(dev, &tf);
 
 	tf.command = ATA_CMD_READ_NATIVE_MAX_EXT;
-	tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_LBA48 | ATA_TFLAG_ISADDR;
+	tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_LBA48 | ATA_TFLAG_ISADDR |
 ATA_TFLAG_POLLING;
 	tf.protocol |= ATA_PROT_NODATA;
 	tf.device |= 0x40;
 
@@ -885,7 +885,7 @@ static u64 ata_read_native_max_address(struct
 ata_device *dev)
 	ata_tf_init(dev, &tf);
 
 	tf.command = ATA_CMD_READ_NATIVE_MAX;
-	tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_ISADDR;
+	tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_ISADDR | ATA_TFLAG_POLLING;
 	tf.protocol |= ATA_PROT_NODATA;
 	tf.device |= 0x40;
 
@@ -915,7 +915,7 @@ static u64 ata_set_native_max_address_ext(struct
 ata_device *dev, u64 new_sector
 	ata_tf_init(dev, &tf);
 
 	tf.command = ATA_CMD_SET_MAX_EXT;
-	tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_LBA48 | ATA_TFLAG_ISADDR;
+	tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_LBA48 | ATA_TFLAG_ISADDR |
 ATA_TFLAG_POLLING;
 	tf.protocol |= ATA_PROT_NODATA;
 	tf.device |= 0x40;
 
@@ -953,7 +953,7 @@ static u64 ata_set_native_max_address(struct
 ata_device *dev, u64 new_sectors)
 	ata_tf_init(dev, &tf);
 
 	tf.command = ATA_CMD_SET_MAX;
-	tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_ISADDR;
+	tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_ISADDR | ATA_TFLAG_POLLING;
 	tf.protocol |= ATA_PROT_NODATA;
 
 	tf.lbal = (new_sectors >> 0) & 0xff;
@@ -1548,7 +1548,7 @@ unsigned int ata_do_simple_cmd(struct ata_device
 *dev, u8 cmd)
 	ata_tf_init(dev, &tf);
 
 	tf.command = cmd;
-	tf.flags |= ATA_TFLAG_DEVICE;
+	tf.flags |= ATA_TFLAG_DEVICE | ATA_TFLAG_POLLING;
 	tf.protocol = ATA_PROT_NODATA;
 
 	return ata_exec_internal(dev, &tf, NULL, DMA_NONE, NULL, 0);
@@ -1655,7 +1655,7 @@ int ata_dev_read_id(struct ata_device *dev,
 unsigned int *p_class,
 	/* Some devices choke if TF registers contain garbage.  Make
 	 * sure those are properly initialized.
 	 */
-	tf.flags |= ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE;
+	tf.flags |= ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE | ATA_TFLAG_POLLING;
 
 	/* Device presence detection is unreliable on some
 	 * controllers.  Always poll IDENTIFY if available.
@@ -1721,7 +1721,7 @@ int ata_dev_read_id(struct ata_device *dev,
 unsigned int *p_class,
 		tf.command = ATA_CMD_SET_FEATURES;
 		tf.feature = SETFEATURES_SPINUP;
 		tf.protocol = ATA_PROT_NODATA;
-		tf.flags |= ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE;
+		tf.flags |= ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE | ATA_TFLAG_POLLING;
 		err_mask = ata_exec_internal(dev, &tf, NULL, DMA_NONE, NULL, 0);
 		if (err_mask && id[2] != 0x738c) {
 			rc = -EIO;
@@ -2368,7 +2368,7 @@ void ata_port_disable(struct ata_port *ap)
 {
 	ap->device[0].class = ATA_DEV_NONE;
 	ap->device[1].class = ATA_DEV_NONE;
-	ap->flags |= ATA_FLAG_DISABLED;
+	ap->flags |= ATA_FLAG_DISABLED | ATA_TFLAG_POLLING;
 }
 
 /**
@@ -3984,7 +3984,7 @@ static unsigned int ata_dev_init_params(struct
 ata_device *dev,
 
 	ata_tf_init(dev, &tf);
 	tf.command = ATA_CMD_INIT_DEV_PARAMS;
-	tf.flags |= ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE;
+	tf.flags |= ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE | ATA_TFLAG_POLLING;
 	tf.protocol = ATA_PROT_NODATA;
 	tf.nsect = sectors;
 	tf.device |= (heads - 1) & 0x0f; /* max head = num. of heads - 1 */

